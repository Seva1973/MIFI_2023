rvs@rvs-k73e:~$ semgrep scan --config auto /home/rvs/jus_shop/juice-shop/
               
               
┌─────────────┐
│ Scan Status │
└─────────────┘



  Scanning 124848 files tracked by git with 1671 Code rules, 580 Pro rules:
                                                                                                                        
  Language      Rules   Files          Origin      Rules                                                                
 ─────────────────────────────        ───────────────────                                                               
  <multilang>      92    5329          Community    1091                                                                
  json              4     915          Pro rules     580                                                                
  ts              251     458                                                                                           
  yaml             28      81                                                                                           
  html              1      75                                                                                           
  js              241      14                                                                                           
  dockerfile        5       1                                                                                           
  bash              4       1                                                                                           
                                                                                                                        
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╸ 100% 0:03:04                                                                                                                        
Warning: 1 timeout error(s) in /home/rvs/jus_shop/juice-shop/frontend/src/assets/private/three.js when running the
following rules: [javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep]
                    
                    
┌──────────────────┐
│ 99 Code Findings │
└──────────────────┘
                                                                          
    /home/rvs/jus_shop/juice-shop/.github/workflows/ci.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
          382┆ uses: Gamesight/slack-workflow-status@master
                                                                                       
    /home/rvs/jus_shop/juice-shop/.github/workflows/codeql-analysis.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           23┆ uses: github/codeql-action/init@v1
            ⋮┆----------------------------------------
           28┆ uses: github/codeql-action/autobuild@v1
            ⋮┆----------------------------------------
           30┆ uses: github/codeql-action/analyze@v1
                                                                                  
    /home/rvs/jus_shop/juice-shop/.github/workflows/lint-fixer.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           24┆ - uses: stefanzweifel/git-auto-commit-action@v4.16.0
                                                                              
    /home/rvs/jus_shop/juice-shop/.github/workflows/rebase.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           17┆ uses: cirrus-actions/rebase@1.2
                                                                               
    /home/rvs/jus_shop/juice-shop/.github/workflows/release.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           45┆ uses: softprops/action-gh-release@v1
            ⋮┆----------------------------------------
           67┆ uses: dawidd6/action-get-tag@v1
            ⋮┆----------------------------------------
           93┆ uses: Gamesight/slack-workflow-status@master
                                                                                             
    /home/rvs/jus_shop/juice-shop/.github/workflows/update-challenges-www.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           25┆ - uses: stefanzweifel/git-auto-commit-action@v4.0.0
                                                                                       
    /home/rvs/jus_shop/juice-shop/.github/workflows/update-news-www.yml 
       yaml.github-actions.security.third-party-action-not-pinned-to-commit-sha.third-party-action-not-
       pinned-to-commit-sha                                                                                
          An action sourced from a third-party repository on GitHub is not pinned to a full length            
          commit SHA. Pinning an action to a full length commit SHA is currently the only way to use          
          an action as an immutable release. Pinning to a particular SHA helps mitigate the risk of a         
          bad actor adding a backdoor to the action's repository, as they would need to generate a            
          SHA-1 collision for a valid Git object payload.                                                     
          Details: https://sg.run/koLA                                                                        
                                                                                                              
           20┆ - uses: stefanzweifel/git-auto-commit-action@v4.0.0
                                                              
    /home/rvs/jus_shop/juice-shop/Gruntfile.js 
       contrib.nodejsscan.crypto_node.node_md5                                            
          The MD5 hashing algorithm is considered to be weak. If this is used in any sensitive      
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`           
          Details: https://sg.run/dKBX                                                              
                                                                                                    
           76┆ const md5 = crypto.createHash('md5')
                                                                     
    /home/rvs/jus_shop/juice-shop/data/datacreator.ts 
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           41┆ const filePath = path.resolve('./data/static/' + file + '.yml')
                                                                                              
    /home/rvs/jus_shop/juice-shop/data/static/codefixes/dbSchemaChallenge_1.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            5┆  ... "SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR description LIKE               
  '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name") ...                                                    
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                              
    /home/rvs/jus_shop/juice-shop/data/static/codefixes/dbSchemaChallenge_3.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           11┆  ... `SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE                
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) ...                                                     
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                                
    /home/rvs/jus_shop/juice-shop/data/static/codefixes/restfulXssChallenge_2.ts 
       javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization     
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                 
          `tableData[i].description`. Manually sanitizing input through a manually built list can be
          circumvented in many situations, and it's better to use a well known sanitization library 
          such as `sanitize-html` or `DOMPurify`.                                                   
          Details: https://sg.run/AzoB                                                              
                                                                                                    
           59┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',    
  '&gt;')                                                                                                               
            ⋮┆----------------------------------------
       javascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization    
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                
          `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a  
          manually built list can be circumvented in many situations, and it's better to use a well
          known sanitization library such as `sanitize-html` or `DOMPurify`.                       
          Details: https://sg.run/AzoB                                                             
                                                                                                   
           59┆ tableData[i].description = tableData[i].description.replaceAll('<', '&lt;').replaceAll('>',       
  '&gt;')                                                                                                            
                                                                                                       
    /home/rvs/jus_shop/juice-shop/data/static/codefixes/unionSqlInjectionChallenge_1.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            6┆  ... `SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE                
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) ...                                                     
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                                       
    /home/rvs/jus_shop/juice-shop/data/static/codefixes/unionSqlInjectionChallenge_3.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           10┆  ... `SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE                
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) ...                                                     
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                       
    /home/rvs/jus_shop/juice-shop/data/static/users.yml 
       generic.secrets.security.detected-generic-secret.detected-generic-secret
          Generic Secret detected                                                        
          Details: https://sg.run/l2o5                                                   
                                                                                         
          150┆ totpSecret: IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH
                                                                         
    /home/rvs/jus_shop/juice-shop/docker-compose.test.yml 
       yaml.docker-compose.security.no-new-privileges.no-new-privileges                  
          Service 'app' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                      
          Details: https://sg.run/0n8q                                                             
                                                                                                   
            7┆ app:
            ⋮┆----------------------------------------
       yaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service 
          Service 'app' is running with a writable root filesystem. This may allow malicious          
          applications to download and run additional payloads, or modify container files. If an      
          application inside a container has to save something temporarily consider using a tmpfs. Add
          'read_only: true' to this service to prevent this.                                          
          Details: https://sg.run/e4JE                                                                
                                                                                                      
            7┆ app:
                                                                                                                        
                                                                                                            
  /home/rvs/jus_shop/juice-shop/frontend/.angular/cache/15.2.9/babel-webpack/1e6b22776edf3cb636b119507ebc4cff5de8d9e3bf6
  14c6b18d9d3ababb46ec0.json                                                                                         
       generic.secrets.security.detected-generic-secret.detected-generic-secret
          Generic Secret detected                                                        
          Details: https://sg.run/l2o5                                                   
                                                                                         
            1┆  ...                                                                                                     
  SecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSev  
  enShadowShaftShallowShareShedShellSheriff ...                                                                      
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                                                        
                                                                                                            
  /home/rvs/jus_shop/juice-shop/frontend/.angular/cache/15.2.9/babel-webpack/b4f12eef0a1c022d9e6e6da54b4751b94b6d9c23b45
  baa86624287ad3efecb56.json                                                                                         
       generic.secrets.security.detected-facebook-oauth.detected-facebook-oauth
          Facebook OAuth detected                                                        
          Details: https://sg.run/Klq6                                                   
                                                                                         
            1┆  ... n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0,          
  \"mat-expansion-panel\", 20)(1, \"mat-expansion-panel-header\", 21) ...                                            
            [shortened a long line from output, adjust with --max-chars-per-line]
            ⋮┆----------------------------------------
       generic.secrets.security.detected-twitter-oauth.detected-twitter-oauth
          Twitter OAuth detected                                                       
          Details: https://sg.run/Lwb7                                                 
                                                                                       
            1┆  ... mplate(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n                
  i0.ɵɵelementStart(0, \"mat-expansion-panel\", 20)(1, \"mat-expansion-p ...                                         
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                                                        
                                                                                                            
  /home/rvs/jus_shop/juice-shop/frontend/.angular/cache/15.2.9/babel-webpack/f15dc67daf1be73b181c4e7e7378d3a8c5a464860fe
  2dd4f0e721cfa320bdfe2.json                                                                                         
       generic.secrets.security.detected-generic-api-key.detected-generic-api-key
          Generic API Key detected                                                         
          Details: https://sg.run/qxj8                                                     
                                                                                           
            1┆  ... ApiKey = '84842078b09946638c03157f83405213';\nconst alchemyRpcUrls = {\n  mainnet:        
  'https://eth-mainnet.alchemyapi.io/v2',\n  ropsten: 'https://eth ...                                               
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                    
    /home/rvs/jus_shop/juice-shop/frontend/src/app/app.guard.spec.ts 
       generic.secrets.security.detected-jwt-token.detected-jwt-token
          JWT token detected                                                   
          Details: https://sg.run/05N5                                         
                                                                               
           40┆  ...                                                                                                     
  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyf 
  Q.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_ ...                                                                       
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                                                
    /home/rvs/jus_shop/juice-shop/frontend/src/app/last-login-ip/last-login-ip.component.spec.ts 
       generic.secrets.security.detected-jwt-token.detected-jwt-token
          JWT token detected                                                   
          Details: https://sg.run/05N5                                         
                                                                               
           50┆  ...                                                                                                     
  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Imxhc3RMb2dpbklwIjoiMS4yLjMuNCJ9fQ.RAkmdqwNypuOxv3SDjPO4x  
  MKvd1CddKvDFYDBfUt3bg') ...                                                                                        
            [shortened a long line from output, adjust with --max-chars-per-line]
            ⋮┆----------------------------------------
           56┆ localStorage.setItem('token',                                                                            
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7fX0.bVBhvll6IaeR3aUdoOeyR8YZe2S2DfhGAxTGfd9enLw')         
                                                                                                           
    /home/rvs/jus_shop/juice-shop/frontend/src/app/search-result/search-result.component.ts 
       typescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust
          Untrusted input could be used to tamper with a web page rendering, which can lead to a           
          Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input         
          executes malicious JavaScript code, leading to issues such as account compromise and             
          sensitive information leakage. Validate the user input, perform contextual output encoding,      
          or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use      
          libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when       
          rendering input.                                                                                 
          Details: https://sg.run/JpBW                                                                     
                                                                                                           
          151┆ this.searchValue = this.sanitizer.bypassSecurityTrustHtml(queryParam) // vuln-code-snippet     
  vuln-line localXssChallenge xssBonusChallenge                                                                         
                                                                                      
    /home/rvs/jus_shop/juice-shop/frontend/src/assets/private/three.js 
       javascript.browser.security.insecure-document-method.insecure-document-method   
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an
          anti-pattern that can lead to XSS vulnerabilities                                      
          Details: https://sg.run/LwA9                                                           
                                                                                                 
        11375┆ this.statusDomElement.innerHTML = message;
                                                                                                    
    /home/rvs/jus_shop/juice-shop/frontend/src/hacking-instructor/helpers/helpers.ts 
       javascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-
       loop                                                                                                
          Possibility of prototype polluting function detected. By adding or modifying attributes of          
          an object prototype, it is possible to create attributes that exist on every object, or             
          replace critical attributes with malicious ones. This can be problematic if the software            
          depends on existence or non-existence of certain attributes, or uses pre-defined attributes         
          of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations             
          might be: freezing the object prototype, using an object without prototypes (via                    
          Object.create(null) ), blocking modifications of attributes that resolve to object                  
          prototype, using Map instead of object.                                                             
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           36┆ replacementValue = replacementValue[property]
                                                                                          
    /home/rvs/jus_shop/juice-shop/frontend/src/hacking-instructor/index.ts 
       javascript.browser.security.insecure-document-method.insecure-document-method   
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an
          anti-pattern that can lead to XSS vulnerabilities                                      
          Details: https://sg.run/LwA9                                                           
                                                                                                 
          107┆ textBox.innerHTML = snarkdown(hint.text)
                                                                         
    /home/rvs/jus_shop/juice-shop/frontend/src/index.html 
       html.security.audit.missing-integrity.missing-integrity                             
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity'        
          attribute allows for the browser to verify that externally hosted files (for example from a
          CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker 
          can modify the externally hosted resource, this could lead to XSS and other types of       
          attacks. To prevent this, include the base64-encoded cryptographic hash of the resource    
          (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally 
          hosted files.                                                                              
          Details: https://sg.run/krXA                                                               
                                                                                                     
           14┆ <link rel="stylesheet" type="text/css"                                                            
  href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css" />                              
            ⋮┆----------------------------------------
           15┆ <script                                                                                           
  src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js"></script>                         
            ⋮┆----------------------------------------
           16┆ <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
                                                                         
    /home/rvs/jus_shop/juice-shop/lib/codingChallenges.ts 
       javascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp   
          RegExp() called with a `challengeKey` function argument, this might allow an attacker to    
          cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP      
          blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead.
          If your regex is run on user-controlled input, consider performing input validation or use a
          regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify 
          that the regex does not appear vulnerable to ReDoS.                                         
          Details: https://sg.run/gr65                                                                
                                                                                                      
           76┆ if (new RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`).exec(lines[i]) != null) {
            ⋮┆----------------------------------------
           78┆ } else if (new RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`).exec(lines[i]) !=     
  null) {                                                                                                               
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           24┆ files.map(file => path.resolve(currPath, file))
            ⋮┆----------------------------------------
           24┆ files.map(file => path.resolve(currPath, file))
                                                                   
    /home/rvs/jus_shop/juice-shop/lib/insecurity.ts 
       contrib.nodejsscan.crypto_node.node_md5                                            
          The MD5 hashing algorithm is considered to be weak. If this is used in any sensitive      
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`           
          Details: https://sg.run/dKBX                                                              
                                                                                                    
           43┆ export const hash = (data: string) => crypto.createHash('md5').update(data).digest('hex')
            ⋮┆----------------------------------------
       javascript.express.session-fixation.session-fixation                                
          Detected `req` argument which enters `res.cookie`, this can lead to session fixation       
          vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to
          unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS).   
          Users should not be able to influence cookies directly, for session cookies, they should be
          generated securely using an approved session management library. If the cookie does need to
          be set by a user, consider using an allow-list based approach to restrict the cookies which
          can be set.                                                                                
          Details: https://sg.run/0qDv                                                               
                                                                                                     
          201┆ res.cookie('token', token)
            ⋮┆----------------------------------------
       javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret                  
          A hard-coded credential was detected. It is not recommended to store credentials in source-
          code, as this risks secrets being leaked and used by either an internal or external        
          malicious adversary. It is recommended to use environment variables to securely provide    
          credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). 
          Details: https://sg.run/4xN9                                                               
                                                                                                     
           56┆ export const authorize = (user = {}) => jwt.sign(user, privateKey, { expiresIn: '6h',          
  algorithm: 'RS256' })                                                                                                 
            ⋮┆----------------------------------------
       javascript.lang.hardcoded.strings.detected-private-key.detected-private-key     
          A secret is hard-coded in the application. Secrets stored in source code, such as      
          credentials, identifiers, and other types of sensitive data, can be leaked and used by 
          internal or external malicious actors. Use environment variables to securely provide   
          credentials and other secrets or retrieve them from a secure vault or Hardware Security
          Module (HSM).                                                                          
          Details: https://sg.run/2dRY                                                           
                                                                                                 
           23┆  ... -----BEGIN RSA PRIVATE                                                                       
  KEY-----\r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX43zO
  6Ko0TFEZx/ ...                                                                                                     
            [shortened a long line from output, adjust with --max-chars-per-line]
            ⋮┆----------------------------------------
       javascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key            
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate
          option such as reading the secret from a config file or using an environment variable. 
          Details: https://sg.run/K9bn                                                           
                                                                                                 
           44┆ export const hmac = (data: string) => crypto.createHmac('sha256',                                 
  'pa4qacea4VK9t9nGv7yZtwmj').update(data).digest('hex')                                                             
            ⋮┆----------------------------------------
          158┆ const hmac = crypto.createHmac('sha256', privateKey)
                                                                                                     
    /home/rvs/jus_shop/juice-shop/lib/startup/restoreOverwrittenFilesWithOriginals.ts 
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           30┆ files.map((filename: string) => copyFile(filename, path.resolve('i18n/',                                 
  filename.substring(filename.lastIndexOf('/') + 1))))                                                        
                                                                                      
    /home/rvs/jus_shop/juice-shop/lib/startup/validatePreconditions.ts 
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           94┆ return access(path.resolve(pathRelativeToProjectRoot)).then(() => {
                                                              
    /home/rvs/jus_shop/juice-shop/lib/utils.ts 
       javascript.jssha.jssha-sha1.jssha-sha1                                             
          The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive     
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`.          
          Details: https://sg.run/ERyN                                                              
                                                                                                    
           97┆ const shaObj = new jsSHA('SHA-1', 'TEXT') // eslint-disable-line new-cap
                                                                 
    /home/rvs/jus_shop/juice-shop/models/index.ts 
       javascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-
       argument                                                                                          
          A secret is hard-coded in the application. Secrets stored in source code, such as                 
          credentials, identifiers, and other types of sensitive data, can be leaked and used by            
          internal or external malicious actors. Use environment variables to securely provide              
          credentials and other secrets or retrieve them from a secure vault or Hardware Security           
          Module (HSM).                                                                                     
          Details: https://sg.run/E7ZB                                                                      
                                                                                                            
           31┆ const sequelize = new Sequelize('database', 'username', 'password', {
                                                                    
    /home/rvs/jus_shop/juice-shop/routes/b2bOrder.ts 
       javascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage
          Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities.           
          Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval`       
          package is an up to date alternative. Be sure that only trusted input reaches an `eval()`         
          function.                                                                                         
          Details: https://sg.run/W70E                                                                      
                                                                                                            
           22┆ vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })
            ⋮┆----------------------------------------
       javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
          Make sure that unverified user data can not reach vm.runInContext.                  
          Details: https://sg.run/9oey                                                        
                                                                                              
           22┆ vm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })
                                                                   
    /home/rvs/jus_shop/juice-shop/routes/captcha.ts 
       javascript.browser.security.eval-detected.eval-detected                             
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If
          this content can be input from outside the program, this may be a code injection           
          vulnerability. Ensure evaluated content is not definable by external sources.              
          Details: https://sg.run/7ope                                                               
                                                                                                     
           23┆ const answer = eval(expression).toString() // eslint-disable-line no-eval
                                                                       
    /home/rvs/jus_shop/juice-shop/routes/dataErasure.ts 
       javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           69┆ const filePath: string = path.resolve(req.body.layout).toLowerCase()
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           69┆ const filePath: string = path.resolve(req.body.layout).toLowerCase()
                                                                      
    /home/rvs/jus_shop/juice-shop/routes/dataExport.ts 
       javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           61┆ db.orders.find({ email: updatedEmail }).then((orders: Array<{
                                                                      
    /home/rvs/jus_shop/juice-shop/routes/fileServer.ts 
       javascript.express.security.audit.express-res-sendfile.express-res-sendfile        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           33┆ res.sendFile(path.resolve('ftp/', file))
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           33┆ res.sendFile(path.resolve('ftp/', file))
                                                                      
    /home/rvs/jus_shop/juice-shop/routes/fileUpload.ts 
       javascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent  
          Detected use of parseXml() function with the `noent` field set to `true`. This can lead to
          an XML External Entities (XXE) attack if untrusted data is passed into it.                
          Details: https://sg.run/n8Ag                                                              
                                                                                                    
           80┆ const xmlDoc = vm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true, nocdata: true
  })', sandbox, { timeout: 2000 })                                                                                   
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           29┆ const tempFile = path.join(os.tmpdir(), filename)
            ⋮┆----------------------------------------
           39┆ const absolutePath = path.resolve('uploads/complaints/' + fileName)
            ⋮┆----------------------------------------
       javascript.lang.security.audit.vm-injection.vm-runincontext-context-injection
          Make sure that unverified user data can not reach vm.runInContext.                  
          Details: https://sg.run/9oey                                                        
                                                                                              
           80┆ const xmlDoc = vm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true, nocdata: true })',  
  sandbox, { timeout: 2000 })                                                                                 
                                                                     
    /home/rvs/jus_shop/juice-shop/routes/keyServer.ts 
       javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-res-sendfile.express-res-sendfile        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
                                                                              
    /home/rvs/jus_shop/juice-shop/routes/likeProductReviews.ts 
       javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ db.reviews.findOne({ _id: id }).then((review: Review) => {
            ⋮┆----------------------------------------
           25┆ { _id: id },
            ⋮┆----------------------------------------
           31┆ db.reviews.findOne({ _id: id }).then((review: Review) => {
            ⋮┆----------------------------------------
           42┆ { _id: id },
                                                                         
    /home/rvs/jus_shop/juice-shop/routes/logfileServer.ts 
       javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('logs/', file))
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-res-sendfile.express-res-sendfile        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile(path.resolve('logs/', file))
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14┆ res.sendFile(path.resolve('logs/', file))
                                                                 
    /home/rvs/jus_shop/juice-shop/routes/login.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           36┆  ... `SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password =                  
  '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { m ...                                     
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                 
    /home/rvs/jus_shop/juice-shop/routes/order.ts 
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           46┆ const fileWriter = doc.pipe(fs.createWriteStream(path.join('ftp/', pdfFile)))
                                                                                  
    /home/rvs/jus_shop/juice-shop/routes/profileImageFileUpload.ts 
       javascript.express.express-fs-filename.express-fs-filename                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           28┆                                                                                                          
  fs.open(`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.data.id}.${uploadedFileType.ext}
  `, 'w', function (err, fd) {                                                                                          
                                                                                 
    /home/rvs/jus_shop/juice-shop/routes/profileImageUrlUpload.ts 
       javascript.express.express-fs-filename.express-fs-filename                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           31┆                                                                                                          
  imageRequest.pipe(fs.createWriteStream(`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.data
  id}.${ext}`))                                                                                                      
            ⋮┆----------------------------------------
       javascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep                        
          Untrusted input might be used to build an HTTP request, which can lead to a Server-side    
          request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from
          the server side to other internal or external systems. SSRF can lead to unauthorized access
          to sensitive data and, in some cases, allow the attacker to control applications or systems
          that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input
          to craft the base request. Instead, treat it as part of the path or query parameter and    
          encode it appropriately. When user input is necessary to prepare the HTTP request, perform 
          strict input validation. Additionally, whenever possible, use allowlists to only interact  
          with expected, trusted domains.                                                            
          Details: https://sg.run/Wxn4                                                               
                                                                                                     
           23┆ .get(url)
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-ssrf.express-ssrf                          
          The following request request.get() was found to be crafted from user-input `req` which can 
          lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible
          to not allow user-input to craft the base request, but to be treated as part of the path or 
          query parameter. When user-input is necessary to craft the request, it is recommeneded to   
          follow OWASP best practices to prevent abuse.                                               
          Details: https://sg.run/0PNw                                                                
                                                                                                      
           23┆ .get(url)
                                                                            
    /home/rvs/jus_shop/juice-shop/routes/quarantineServer.ts 
       javascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-res-sendfile.express-res-sendfile        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
            ⋮┆----------------------------------------
       javascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
                                                                    
    /home/rvs/jus_shop/juice-shop/routes/redirect.ts 
       javascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep               
          The application builds a URL using user-controlled input which can lead to an open redirect 
          vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain.
          Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or      
          redirecting to a malicious domain for activities such as phishing to capture users'         
          credentials. To prevent this vulnerability perform strict input validation of the domain    
          against an allowlist of approved domains. Notify a user in your application that they are   
          leaving the website. Display a domain where they are redirected to the user. A user can then
          either accept or deny the redirect to an untrusted site.                                    
          Details: https://sg.run/BDbW                                                                
                                                                                                      
           19┆ res.redirect(toUrl as string)
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-open-redirect.express-open-redirect        
          The application redirects to a URL specified by user-supplied input `query` that is not     
          validated. This could redirect users to malicious locations. Consider using an allow-list   
          approach to validate URLs, or warn users they are being redirected to a third-party website.
          Details: https://sg.run/EpoP                                                                
                                                                                                      
           19┆ res.redirect(toUrl as string)
                                                                  
    /home/rvs/jus_shop/juice-shop/routes/search.ts 
       javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           23┆  ... `SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE                
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code- ...                                       
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                              
    /home/rvs/jus_shop/juice-shop/routes/showProductReviews.ts 
       javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           34┆ db.reviews.find({ $where: 'this.product == ' + id }).then((reviews: Review[]) => {
                                                                      
    /home/rvs/jus_shop/juice-shop/routes/trackOrder.ts 
       javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ db.orders.find({ $where: `this.orderId === '${id}'` }).then((order: any) => {
                                                                                
    /home/rvs/jus_shop/juice-shop/routes/updateProductReviews.ts 
       javascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ { _id: req.body.id }, // vuln-code-snippet vuln-line noSqlReviewsChallenge                     
  forgedReviewChallenge                                                                                                 
                                                                       
    /home/rvs/jus_shop/juice-shop/routes/userProfile.ts 
       javascript.browser.security.eval-detected.eval-detected                             
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If
          this content can be input from outside the program, this may be a code injection           
          vulnerability. Ensure evaluated content is not definable by external sources.              
          Details: https://sg.run/7ope                                                               
                                                                                                     
           36┆ username = eval(code) // eslint-disable-line no-eval
            ⋮┆----------------------------------------
       javascript.express.security.express-insecure-template-usage.express-insecure-template-usage
          User data from `req` is being compiled into the template, which can lead to a Server Side         
          Template Injection (SSTI) vulnerability.                                                          
          Details: https://sg.run/b49v                                                                      
                                                                                                            
           56┆ const fn = pug.compile(template)
                                                                        
    /home/rvs/jus_shop/juice-shop/routes/videoHandler.ts 
       javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be              
          susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or        
          sanitize this data.                                                                              
          Details: https://sg.run/1Zy1                                                                     
                                                                                                           
           69┆  ... subs + '</script>') ... 
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                         
    /home/rvs/jus_shop/juice-shop/routes/vulnCodeFixes.ts 
       javascript.express.express-fs-filename.express-fs-filename                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           81┆ if (fs.existsSync('./data/static/codefixes/' + key + '.info.yml')) {
            ⋮┆----------------------------------------
           82┆ const codingChallengeInfos = yaml.load(fs.readFileSync('./data/static/codefixes/' + key +         
  '.info.yml', 'utf8'))                                                                                              
                                                                           
    /home/rvs/jus_shop/juice-shop/routes/vulnCodeSnippet.ts 
       javascript.express.express-fs-filename.express-fs-filename                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           93┆ if (fs.existsSync('./data/static/codefixes/' + key + '.info.yml')) {
            ⋮┆----------------------------------------
           94┆ const codingChallengeInfos = yaml.load(fs.readFileSync('./data/static/codefixes/' + key +         
  '.info.yml', 'utf8'))                                                                                              
                                                           
    /home/rvs/jus_shop/juice-shop/server.ts 
       javascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-
       middleware-usage                                                                               
          A CSRF middleware was not detected in your express application. Ensure you are either using    
          one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF         
          validation in your routes with a token or cookies.                                             
          Details: https://sg.run/BxzR                                                                   
                                                                                                         
           96┆ const app = express()
            ⋮┆----------------------------------------
       javascript.express.security.audit.express-check-directory-listing.express-check-directory-
       listing                                                                                       
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories  
          and files. It is recommended to disable directory listing unless it is a public resource. If  
          you need directory listing, ensure that sensitive files are inaccessible when querying the    
          resource.                                                                                     
          Details: https://sg.run/DX2G                                                                  
                                                                                                        
          245┆ app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-snippet 
  vuln-line directoryListingChallenge                                                                                   
            ⋮┆----------------------------------------
          250┆ app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true, view:
  'details' }))                                                                                                      
            ⋮┆----------------------------------------
          254┆ app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view: 'details'  
  })) // vuln-code-snippet vuln-line accessLogDisclo ...                                                          
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                          
    /home/rvs/jus_shop/juice-shop/views/promotionVideo.pug 
       javascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape
          Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external  
          data can reach these locations, your application is exposed to a cross-site scripting (XSS)  
          vulnerability. If you must do this, ensure no external data can reach this location.         
          Details: https://sg.run/3xbe                                                                 
                                                                                                       
           79┆ if (splitted.length != 2) {

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘
Some files were skipped or only partially analyzed.
  Partially scanned: 30 files only partially analyzed due to parsing or internal Semgrep errors
  Scan skipped: 122 files larger than 1.0 MB, 122922 files matching .semgrepignore patterns
  For a full list of skipped files, run semgrep with the --verbose flag.

Ran 1671 rules on 1778 files: 99 findings.

