Нужно создать скрипт Python, который спрашивает у пользователя название города и выводит текущую температуру и общее состояние погоды c сайта https://openweathermap.org. API_key для запроса  "f2222cab4aad4a164742d76a3c01f561"
Для выполнения задачи, вам потребуется установить библиотеку requests, чтобы отправлять запросы на сайт OpenWeatherMap и получать данные о погоде.

Вы можете установить requests с помощью pip, выполнив в командной строке следующую команду:

Copy code
pip install requests
Кроме того, вы должны использовать API-ключ, который вы получили на сайте OpenWeatherMap, чтобы сделать запрос к их API.

Вот пример скрипта, который выполняет задачу:

python
Copy code
import requests

API_KEY = "f2222cab4aad4a164742d76a3c01f561"

city_name = input("Введите название города: ")

url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_KEY}&units=metric"

response = requests.get(url)

if response.status_code == 200:
    data = response.json()
    temp = data["main"]["temp"]
    weather_description = data["weather"][0]["description"]
    print(f"Текущая температура в городе {city_name}: {temp}°C")
    print(f"Состояние погоды: {weather_description}")
else:
    print("Ошибка при получении данных о погоде")
Этот скрипт запрашивает у пользователя название города и отправляет запрос на сайт OpenWeatherMap с помощью API-ключа, чтобы получить данные о погоде в этом городе. Затем он извлекает температуру и описание погоды из ответа и выводит их на экран.

Обратите внимание, что в этом скрипте мы использовали параметр units=metric в запросе к API, чтобы получить температуру в градусах Цельсия. Если вы хотите использовать другие единицы измерения, вы можете изменить этот параметр.




Vsevolod Ryzhov
Как этот скрипт запустить в Docker контейнере?
Для запуска скрипта в Docker контейнере, вам потребуется создать Docker образ и контейнер для этого скрипта. Вы можете использовать следующий процесс для создания Docker образа и контейнера:

Создайте файл с именем Dockerfile в корневой папке вашего проекта и добавьте в него следующий код:
bash
Copy code
# Установка базового образа Python
FROM python:3.9-slim-buster

# Копирование кода приложения в образ
COPY . /app

# Установка зависимостей
RUN pip install -r /app/requirements.txt

# Запуск скрипта при запуске контейнера
CMD ["python", "/app/weather.py"]
Этот Dockerfile использует базовый образ Python 3.9, копирует код приложения из текущей директории в папку /app внутри образа, устанавливает зависимости из файла requirements.txt и указывает на запуск скрипта weather.py при запуске контейнера.

Создайте файл с именем requirements.txt и добавьте в него следующую строку:
Copy code
requests
Этот файл указывает на необходимость установки библиотеки requests, которая используется в нашем скрипте.

Создайте Docker образ, выполнив в командной строке следующую команду в директории с вашим проектом:
Copy code
docker build -t weather-app .
Эта команда создаст Docker образ с именем weather-app, используя Dockerfile и файл requirements.txt из текущей директории.

Запустите Docker контейнер, выполнив в командной строке следующую команду:
bash
Copy code
docker run -it --rm weather-app
Эта команда запустит Docker контейнер, созданный из образа weather-app. Флаги -it указывают на интерактивный режим и подключение терминала, а --rm указывает на удаление контейнера после его остановки.

После выполнения этих шагов вы должны увидеть сообщение Введите название города: в терминале Docker контейнера, и вы можете вводить названия городов, чтобы получить информацию о погоде.

как пробросить порты на компьютер из этого контейнера 
Чтобы пробросить порты на компьютер из Docker контейнера, вам необходимо добавить параметры -p или --publish при запуске контейнера. Команда должна выглядеть следующим образом:

ruby
Copy code
docker run -it --rm -p <port_on_host>:<port_in_container> weather-app
Здесь <port_on_host> - это порт на вашем компьютере, который будет использоваться для связи с портом в контейнере <port_in_container>. Например, если вы хотите пробросить порт 8000 на вашем компьютере на порт 80 в контейнере, то команда будет выглядеть так:

css
Copy code
docker run -it --rm -p 8000:80 weather-app
Теперь вы можете открыть браузер на своем компьютере и перейти по адресу http://localhost:8000, чтобы получить доступ к приложению в контейнере, который запущен на порту 80.




Vsevolod Ryzhov
как прописать порт в dockerfile
Чтобы прописать порт в Dockerfile, вам нужно использовать инструкцию EXPOSE в Dockerfile.

Инструкция EXPOSE указывает на порты, которые контейнер должен открыть, когда он запущен. Однако, это не означает, что порты автоматически пробрасываются на хост-систему.

Вот как вы можете использовать инструкцию EXPOSE в вашем Dockerfile:

bash
Copy code
# Установка базового образа Python
FROM python:3.9-slim-buster

# Копирование кода приложения в образ
COPY . /app

# Установка зависимостей
RUN pip install -r /app/requirements.txt

# Указание порта, который должен быть открыт при запуске контейнера
EXPOSE 80

# Запуск скрипта при запуске контейнера
CMD ["python", "/app/weather.py"]
Здесь мы добавляем инструкцию EXPOSE 80 в наш Dockerfile, что указывает на то, что контейнер должен открыть порт 80. Когда вы запустите контейнер, вы можете использовать параметр -p или --publish для проброса порта 80 в контейнере на порт вашего выбора на хост-системе.


