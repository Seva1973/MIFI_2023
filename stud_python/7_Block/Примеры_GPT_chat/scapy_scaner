напиши с помощью scapy простой сканер домашней сети
Вот пример кода сканера домашней сети, написанного с использованием библиотеки Scapy на языке Python:

scss
Copy code
from scapy.all import ARP, Ether, srp

target_ip = "192.168.1.0/24"
arp = ARP(pdst=target_ip)
ether = Ether(dst="ff:ff:ff:ff:ff:ff")
packet = ether/arp
result = srp(packet, timeout=3, verbose=0)[0]

clients = []
for sent, received in result:
    clients.append({'ip': received.psrc, 'mac': received.hwsrc})

print("Available devices in the network:")
print("IP" + " "*18 + "MAC")
for client in clients:
    print("{:16}    {}".format(client['ip'], client['mac']))
Этот скрипт отправляет ARP-запрос на указанный диапазон IP-адресов, получает ответы и выводит список всех обнаруженных устройств в формате IP-адреса и MAC-адреса.

Обратите внимание, что для работы скрипта вам необходимо установить библиотеку Scapy (pip install scapy) и запускать его с правами администратора (например, через командную строку с использованием команды sudo python script.py). Также помните, что сканирование сети может нарушать законы и привести к неприятностям, поэтому используйте его только для легальных целей и с разрешения владельца сети.




Vsevolod Ryzhov
напиши комментарии к каждой команде приведенного выше скрипта
Конечно, я с удовольствием прокомментирую каждую команду скрипта, чтобы вы могли лучше понять, как он работает:

python
Copy code
from scapy.all import ARP, Ether, srp
Эта строка импортирует три модуля из библиотеки Scapy: ARP (для работы с протоколом ARP), Ether (для работы с кадрами Ethernet) и srp (для отправки и приема пакетов на канальном уровне).

makefile
Copy code
target_ip = "192.168.1.0/24"
Эта строка определяет диапазон IP-адресов, который будет сканироваться. В данном случае сканируются все адреса в подсети 192.168.1.0/24.

scss
Copy code
arp = ARP(pdst=target_ip)
Эта строка создает ARP-запрос с указанным в target_ip адресом назначения.

makefile
Copy code
ether = Ether(dst="ff:ff:ff:ff:ff:ff")
Эта строка создает кадр Ethernet с широковещательным MAC-адресом назначения.

bash
Copy code
packet = ether/arp
Эта строка объединяет кадр Ethernet и ARP-запрос в один пакет.

scss
Copy code
result = srp(packet, timeout=3, verbose=0)[0]
Эта строка отправляет пакет, получает ответы в течение 3 секунд и сохраняет их в переменной result. Опция verbose=0 отключает вывод информации о процессе сканирования.

css
Copy code
clients = []
for sent, received in result:
    clients.append({'ip': received.psrc, 'mac': received.hwsrc})
Эта строка обрабатывает полученные ответы и сохраняет IP-адреса и MAC-адреса найденных устройств в списке clients.

python
Copy code
print("Available devices in the network:")
print("IP" + " "*18 + "MAC")
for client in clients:
    print("{:16}    {}".format(client['ip'], client['mac']))
Эта строка выводит список найденных устройств в консоль. Каждое устройство отображается в формате IP-адреса и MAC-адреса. Вывод начинается с заголовка "Available devices in the network:", чтобы пользователь понимал, что выводит данный скрипт.




Vsevolod Ryzhov
допиши скрипт командой вывода списка найденных устройств в текстовый файл
Конечно, вот как можно дополнить скрипт для записи найденных устройств в текстовый файл:

scss
Copy code
from scapy.all import ARP, Ether, srp

target_ip = "192.168.1.0/24"
arp = ARP(pdst=target_ip)
ether = Ether(dst="ff:ff:ff:ff:ff:ff")
packet = ether/arp
result = srp(packet, timeout=3, verbose=0)[0]

clients = []
for sent, received in result:
    clients.append({'ip': received.psrc, 'mac': received.hwsrc})

# Открываем файл для записи
with open("devices.txt", "w") as f:
    f.write("Available devices in the network:\n")
    f.write("IP" + " "*18 + "MAC\n")
    for client in clients:
        f.write("{:16}    {}\n".format(client['ip'], client['mac']))
        print("{:16}    {}".format(client['ip'], client['mac']))

print("Results saved to devices.txt")
Эта версия скрипта работает аналогично предыдущей, но добавляет запись результатов в текстовый файл. Команда with open("devices.txt", "w") as f: открывает файл "devices.txt" для записи (режим "w" означает, что файл будет перезаписан при каждом запуске скрипта). Затем мы записываем в файл заголовок и список
